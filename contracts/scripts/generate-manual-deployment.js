const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("🔧 Generating Manual Deployment Data");
  console.log("====================================");

  // Contract addresses
  const HIGHER_TOKEN = "0x0578d8A44db98B23BF096A382e016e29a5Ce0ffe";
  const WETH = "0x4200000000000000000000000000000000000006";
  const UNISWAP_POOL = "0xCC28456d4Ff980CeE3457Ca809a257E52Cd9CDb0";
  const UNISWAP_ROUTER = "0x2626664c2603336E57B271c5C0b26F421741e481";
  const UNISWAP_QUOTER = "0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a";
  const POSITION_MANAGER = "0x0000000000000000000000000000000000000000";
  const DEV_WALLET = "0x0B3520A5C09f27c6ac7702e74a751583024d81A2";

  // Compile the contract
  console.log("📦 Compiling SplitRouter contract...");
  await hre.run("compile");

  // Get the contract factory
  const ContractFactory = await ethers.getContractFactory("SplitRouter");

  // Generate deployment transaction data
  console.log("🔧 Generating deployment transaction data...");
  const deployTransaction = ContractFactory.getDeployTransaction(
    HIGHER_TOKEN,
    WETH,
    UNISWAP_POOL,
    UNISWAP_ROUTER,
    UNISWAP_QUOTER,
    POSITION_MANAGER,
    DEV_WALLET
  );

  // Get contract artifact
  const artifactPath = path.join(__dirname, "../artifacts/contracts/SplitRouter.sol/SplitRouter.json");
  const artifact = JSON.parse(fs.readFileSync(artifactPath, "utf8"));

  // Create deployment data
  const deploymentData = {
    contractName: "SplitRouter",
    constructorArguments: [
      HIGHER_TOKEN,
      WETH,
      UNISWAP_POOL,
      UNISWAP_ROUTER,
      UNISWAP_QUOTER,
      POSITION_MANAGER,
      DEV_WALLET
    ],
    bytecode: artifact.bytecode,
    abi: artifact.abi,
    deploymentTransaction: {
      data: deployTransaction.data,
      gasLimit: "5000000",
      gasPrice: "100000000" // 0.1 gwei
    },
    verificationData: {
      compilerVersion: "0.8.19",
      optimization: true,
      optimizationRuns: 200,
      evmVersion: "paris"
    }
  };

  // Save to file
  const outputPath = path.join(__dirname, "../manual-deployment-data.json");
  fs.writeFileSync(outputPath, JSON.stringify(deploymentData, null, 2));

  console.log("✅ Manual deployment data generated!");
  console.log(`📁 Saved to: ${outputPath}`);
  console.log("\n📋 DEPLOYMENT SUMMARY:");
  console.log("========================");
  console.log(`Contract: ${deploymentData.contractName}`);
  console.log(`Constructor Arguments: ${deploymentData.constructorArguments.length}`);
  console.log(`Bytecode Length: ${deploymentData.bytecode.length} characters`);
  console.log(`ABI Functions: ${deploymentData.abi.filter(item => item.type === 'function').length}`);
  console.log(`Gas Limit: ${deploymentData.deploymentTransaction.gasLimit}`);
  console.log(`Gas Price: ${deploymentData.deploymentTransaction.gasPrice} wei (0.1 gwei)`);

  console.log("\n🔧 CONSTRUCTOR PARAMETERS:");
  console.log("===========================");
  console.log(`1. HIGHER Token: ${HIGHER_TOKEN}`);
  console.log(`2. WETH: ${WETH}`);
  console.log(`3. Uniswap Pool: ${UNISWAP_POOL}`);
  console.log(`4. Uniswap Router: ${UNISWAP_ROUTER}`);
  console.log(`5. Uniswap Quoter: ${UNISWAP_QUOTER}`);
  console.log(`6. Position Manager: ${POSITION_MANAGER}`);
  console.log(`7. Dev Wallet: ${DEV_WALLET}`);

  console.log("\n📝 NEXT STEPS:");
  console.log("===============");
  console.log("1. Go to https://basescan.org");
  console.log("2. Click 'Contract' tab");
  console.log("3. Click 'Deploy Contract'");
  console.log("4. Upload SplitRouter.sol file");
  console.log("5. Use the constructor parameters above");
  console.log("6. Deploy with the generated bytecode");
  console.log("7. Verify the contract after deployment");
  console.log("8. Update lib/contracts.ts with new address");

  // Also create a simple text file with just the essential info
  const simpleOutput = `Manual Deployment Data for SplitRouter

CONSTRUCTOR PARAMETERS (in order):
1. _higher: 0x0578d8A44db98B23BF096A382e016e29a5Ce0ffe
2. _weth: 0x4200000000000000000000000000000000000006
3. _uniswapPool: 0xCC28456d4Ff980CeE3457Ca809a257E52Cd9CDb0
4. _uniswapRouter: 0x2626664c2603336E57B271c5C0b26F421741e481
5. _uniswapQuoter: 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a
6. _positionManager: 0x0000000000000000000000000000000000000000
7. _devWallet: 0x0B3520A5C09f27c6ac7702e74a751583024d81A2

COMPILER SETTINGS:
- Compiler Version: 0.8.19
- Optimization: Enabled
- Optimization Runs: 200
- EVM Version: paris

DEPLOYMENT SETTINGS:
- Gas Limit: 5,000,000
- Gas Price: 0.1 gwei (100,000,000 wei)
- Network: Base Mainnet (Chain ID: 8453)

VERIFICATION SETTINGS:
- Use same compiler settings as deployment
- Upload SplitRouter.sol source code
- Use same constructor arguments
`;

  const simplePath = path.join(__dirname, "../deployment-parameters.txt");
  fs.writeFileSync(simplePath, simpleOutput);
  console.log(`📄 Simple parameters saved to: ${simplePath}`);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
